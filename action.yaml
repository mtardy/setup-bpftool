name: 'Setup bpftool'
description: 'Install bpftool static binaries'
branding:
  icon: 'download'
  color: 'gray-dark'
inputs:
  version:
    description: 'Version of bpftool to install'
    required: false
    default: 'latest'
  path:
    description: 'Installation path'
    required: false
    default: '/usr/local/bin'
  token:
    description: 'A GitHub token (e.g. secrets.GITHUB_TOKEN) to authenticate requests to GitHub API'
    required: false


runs:
  using: "composite"
  steps:
    - name: detect arch
      id: arch
      shell: bash
      run: |
        case $(uname -m) in
          x86_64) echo "arch=amd64" >> $GITHUB_OUTPUT;;
          aarch64) echo "arch=arm64" >> $GITHUB_OUTPUT;;
          *) echo "Unsupported architecture: $(uname -m)"; exit 1;;
        esac

    - name: retrieve version
      id: version
      shell: bash {0}
      env:
        AUTH_TOKEN: ${{ inputs.token }} # for bash param expansion
      run: |
        if [[ "${{ inputs.version }}" = "latest" ]]; then
          max_attempts=7
          attempt=1
          retry_delay=1
          while [ -z "$version" ]; do
              echo "Attempt $attempt: Fetching latest version from GitHub..."
              response=$(curl -s ${AUTH_TOKEN:+ -H "authorization: Bearer $AUTH_TOKEN"} https://api.github.com/repos/libbpf/bpftool/releases/latest)
              version=$(echo $response | jq -r '.tag_name | select (.!=null)')
              attempt=$((attempt + 1))
              if [ -z "$version" ]; then
                  if [ "$attempt" -gt "$max_attempts" ]; then
                      break
                  fi
                  delay=$((2 ** (attempt - 1) * retry_delay))
                  echo -e "$response\n"
                  echo "Fetching latest version from GitHub failed. Retrying in $delay seconds..."
                  sleep "$delay"
              fi
          done
          if [ -z "$version" ]; then
              echo "Fetching latest version failed after $max_attempts attempts. GitHub API might be unavailable, rerun this workflow later, exiting!"
              exit 1
          fi
        else
          echo "Using custom version '${{ inputs.version }}' defined by user..."
          version=${{ inputs.version }}
        fi
        echo "Version retrieved: '$version'"
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: cache download
      id: cache-download
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ inputs.path }}/bpftool
        key: bpftool-${{ steps.version.outputs.version }}-${{ steps.arch.outputs.arch }}

    - name: download
      if: steps.cache-download.outputs.cache-hit != 'true'
      shell: bash
      env:
        AUTH_TOKEN: ${{ inputs.token }} # for bash param expansion
      run: |
        curl -s -L ${AUTH_TOKEN:+ -H "authorization: Bearer $AUTH_TOKEN"} https://github.com/libbpf/bpftool/releases/download/${{ steps.version.outputs.version }}/bpftool-${{ steps.version.outputs.version }}-${{ steps.arch.outputs.arch }}.tar.gz | tar xz
        sudo install bpftool ${{ inputs.path }}

    - name: check installation
      shell: bash
      run: bpftool version
